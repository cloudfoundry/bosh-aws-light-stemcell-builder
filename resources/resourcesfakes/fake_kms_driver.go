// Code generated by counterfeiter. DO NOT EDIT.
package resourcesfakes

import (
	"light-stemcell-builder/resources"
	"sync"
)

type FakeKmsDriver struct {
	CreateAliasStub        func(resources.KmsCreateAliasDriverConfig) (resources.KmsAlias, error)
	createAliasMutex       sync.RWMutex
	createAliasArgsForCall []struct {
		arg1 resources.KmsCreateAliasDriverConfig
	}
	createAliasReturns struct {
		result1 resources.KmsAlias
		result2 error
	}
	createAliasReturnsOnCall map[int]struct {
		result1 resources.KmsAlias
		result2 error
	}
	ReplicateKeyStub        func(resources.KmsReplicateKeyDriverConfig) (resources.KmsKey, error)
	replicateKeyMutex       sync.RWMutex
	replicateKeyArgsForCall []struct {
		arg1 resources.KmsReplicateKeyDriverConfig
	}
	replicateKeyReturns struct {
		result1 resources.KmsKey
		result2 error
	}
	replicateKeyReturnsOnCall map[int]struct {
		result1 resources.KmsKey
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeKmsDriver) CreateAlias(arg1 resources.KmsCreateAliasDriverConfig) (resources.KmsAlias, error) {
	fake.createAliasMutex.Lock()
	ret, specificReturn := fake.createAliasReturnsOnCall[len(fake.createAliasArgsForCall)]
	fake.createAliasArgsForCall = append(fake.createAliasArgsForCall, struct {
		arg1 resources.KmsCreateAliasDriverConfig
	}{arg1})
	stub := fake.CreateAliasStub
	fakeReturns := fake.createAliasReturns
	fake.recordInvocation("CreateAlias", []interface{}{arg1})
	fake.createAliasMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKmsDriver) CreateAliasCallCount() int {
	fake.createAliasMutex.RLock()
	defer fake.createAliasMutex.RUnlock()
	return len(fake.createAliasArgsForCall)
}

func (fake *FakeKmsDriver) CreateAliasCalls(stub func(resources.KmsCreateAliasDriverConfig) (resources.KmsAlias, error)) {
	fake.createAliasMutex.Lock()
	defer fake.createAliasMutex.Unlock()
	fake.CreateAliasStub = stub
}

func (fake *FakeKmsDriver) CreateAliasArgsForCall(i int) resources.KmsCreateAliasDriverConfig {
	fake.createAliasMutex.RLock()
	defer fake.createAliasMutex.RUnlock()
	argsForCall := fake.createAliasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKmsDriver) CreateAliasReturns(result1 resources.KmsAlias, result2 error) {
	fake.createAliasMutex.Lock()
	defer fake.createAliasMutex.Unlock()
	fake.CreateAliasStub = nil
	fake.createAliasReturns = struct {
		result1 resources.KmsAlias
		result2 error
	}{result1, result2}
}

func (fake *FakeKmsDriver) CreateAliasReturnsOnCall(i int, result1 resources.KmsAlias, result2 error) {
	fake.createAliasMutex.Lock()
	defer fake.createAliasMutex.Unlock()
	fake.CreateAliasStub = nil
	if fake.createAliasReturnsOnCall == nil {
		fake.createAliasReturnsOnCall = make(map[int]struct {
			result1 resources.KmsAlias
			result2 error
		})
	}
	fake.createAliasReturnsOnCall[i] = struct {
		result1 resources.KmsAlias
		result2 error
	}{result1, result2}
}

func (fake *FakeKmsDriver) ReplicateKey(arg1 resources.KmsReplicateKeyDriverConfig) (resources.KmsKey, error) {
	fake.replicateKeyMutex.Lock()
	ret, specificReturn := fake.replicateKeyReturnsOnCall[len(fake.replicateKeyArgsForCall)]
	fake.replicateKeyArgsForCall = append(fake.replicateKeyArgsForCall, struct {
		arg1 resources.KmsReplicateKeyDriverConfig
	}{arg1})
	stub := fake.ReplicateKeyStub
	fakeReturns := fake.replicateKeyReturns
	fake.recordInvocation("ReplicateKey", []interface{}{arg1})
	fake.replicateKeyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeKmsDriver) ReplicateKeyCallCount() int {
	fake.replicateKeyMutex.RLock()
	defer fake.replicateKeyMutex.RUnlock()
	return len(fake.replicateKeyArgsForCall)
}

func (fake *FakeKmsDriver) ReplicateKeyCalls(stub func(resources.KmsReplicateKeyDriverConfig) (resources.KmsKey, error)) {
	fake.replicateKeyMutex.Lock()
	defer fake.replicateKeyMutex.Unlock()
	fake.ReplicateKeyStub = stub
}

func (fake *FakeKmsDriver) ReplicateKeyArgsForCall(i int) resources.KmsReplicateKeyDriverConfig {
	fake.replicateKeyMutex.RLock()
	defer fake.replicateKeyMutex.RUnlock()
	argsForCall := fake.replicateKeyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeKmsDriver) ReplicateKeyReturns(result1 resources.KmsKey, result2 error) {
	fake.replicateKeyMutex.Lock()
	defer fake.replicateKeyMutex.Unlock()
	fake.ReplicateKeyStub = nil
	fake.replicateKeyReturns = struct {
		result1 resources.KmsKey
		result2 error
	}{result1, result2}
}

func (fake *FakeKmsDriver) ReplicateKeyReturnsOnCall(i int, result1 resources.KmsKey, result2 error) {
	fake.replicateKeyMutex.Lock()
	defer fake.replicateKeyMutex.Unlock()
	fake.ReplicateKeyStub = nil
	if fake.replicateKeyReturnsOnCall == nil {
		fake.replicateKeyReturnsOnCall = make(map[int]struct {
			result1 resources.KmsKey
			result2 error
		})
	}
	fake.replicateKeyReturnsOnCall[i] = struct {
		result1 resources.KmsKey
		result2 error
	}{result1, result2}
}

func (fake *FakeKmsDriver) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createAliasMutex.RLock()
	defer fake.createAliasMutex.RUnlock()
	fake.replicateKeyMutex.RLock()
	defer fake.replicateKeyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeKmsDriver) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ resources.KmsDriver = new(FakeKmsDriver)
