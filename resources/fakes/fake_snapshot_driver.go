// This file was generated by counterfeiter
package fakes

import (
	"light-stemcell-builder/resources"
	"sync"
)

type FakeSnapshotDriver struct {
	CreateStub        func(resources.SnapshotDriverConfig) (resources.Snapshot, error)
	createMutex       sync.RWMutex
	createArgsForCall []struct {
		arg1 resources.SnapshotDriverConfig
	}
	createReturns struct {
		result1 resources.Snapshot
		result2 error
	}
}

func (fake *FakeSnapshotDriver) Create(arg1 resources.SnapshotDriverConfig) (resources.Snapshot, error) {
	fake.createMutex.Lock()
	fake.createArgsForCall = append(fake.createArgsForCall, struct {
		arg1 resources.SnapshotDriverConfig
	}{arg1})
	fake.createMutex.Unlock()
	if fake.CreateStub != nil {
		return fake.CreateStub(arg1)
	} else {
		return fake.createReturns.result1, fake.createReturns.result2
	}
}

func (fake *FakeSnapshotDriver) CreateCallCount() int {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return len(fake.createArgsForCall)
}

func (fake *FakeSnapshotDriver) CreateArgsForCall(i int) resources.SnapshotDriverConfig {
	fake.createMutex.RLock()
	defer fake.createMutex.RUnlock()
	return fake.createArgsForCall[i].arg1
}

func (fake *FakeSnapshotDriver) CreateReturns(result1 resources.Snapshot, result2 error) {
	fake.CreateStub = nil
	fake.createReturns = struct {
		result1 resources.Snapshot
		result2 error
	}{result1, result2}
}

var _ resources.SnapshotDriver = new(FakeSnapshotDriver)
