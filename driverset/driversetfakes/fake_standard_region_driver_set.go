// Code generated by counterfeiter. DO NOT EDIT.
package driversetfakes

import (
	"light-stemcell-builder/driverset"
	"light-stemcell-builder/resources"
	"sync"
)

type FakeStandardRegionDriverSet struct {
	CopyAmiDriverStub        func() resources.AmiDriver
	copyAmiDriverMutex       sync.RWMutex
	copyAmiDriverArgsForCall []struct {
	}
	copyAmiDriverReturns struct {
		result1 resources.AmiDriver
	}
	copyAmiDriverReturnsOnCall map[int]struct {
		result1 resources.AmiDriver
	}
	CreateAmiDriverStub        func() resources.AmiDriver
	createAmiDriverMutex       sync.RWMutex
	createAmiDriverArgsForCall []struct {
	}
	createAmiDriverReturns struct {
		result1 resources.AmiDriver
	}
	createAmiDriverReturnsOnCall map[int]struct {
		result1 resources.AmiDriver
	}
	CreateSnapshotDriverStub        func() resources.SnapshotDriver
	createSnapshotDriverMutex       sync.RWMutex
	createSnapshotDriverArgsForCall []struct {
	}
	createSnapshotDriverReturns struct {
		result1 resources.SnapshotDriver
	}
	createSnapshotDriverReturnsOnCall map[int]struct {
		result1 resources.SnapshotDriver
	}
	MachineImageDriverStub        func() resources.MachineImageDriver
	machineImageDriverMutex       sync.RWMutex
	machineImageDriverArgsForCall []struct {
	}
	machineImageDriverReturns struct {
		result1 resources.MachineImageDriver
	}
	machineImageDriverReturnsOnCall map[int]struct {
		result1 resources.MachineImageDriver
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStandardRegionDriverSet) CopyAmiDriver() resources.AmiDriver {
	fake.copyAmiDriverMutex.Lock()
	ret, specificReturn := fake.copyAmiDriverReturnsOnCall[len(fake.copyAmiDriverArgsForCall)]
	fake.copyAmiDriverArgsForCall = append(fake.copyAmiDriverArgsForCall, struct {
	}{})
	stub := fake.CopyAmiDriverStub
	fakeReturns := fake.copyAmiDriverReturns
	fake.recordInvocation("CopyAmiDriver", []interface{}{})
	fake.copyAmiDriverMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStandardRegionDriverSet) CopyAmiDriverCallCount() int {
	fake.copyAmiDriverMutex.RLock()
	defer fake.copyAmiDriverMutex.RUnlock()
	return len(fake.copyAmiDriverArgsForCall)
}

func (fake *FakeStandardRegionDriverSet) CopyAmiDriverCalls(stub func() resources.AmiDriver) {
	fake.copyAmiDriverMutex.Lock()
	defer fake.copyAmiDriverMutex.Unlock()
	fake.CopyAmiDriverStub = stub
}

func (fake *FakeStandardRegionDriverSet) CopyAmiDriverReturns(result1 resources.AmiDriver) {
	fake.copyAmiDriverMutex.Lock()
	defer fake.copyAmiDriverMutex.Unlock()
	fake.CopyAmiDriverStub = nil
	fake.copyAmiDriverReturns = struct {
		result1 resources.AmiDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) CopyAmiDriverReturnsOnCall(i int, result1 resources.AmiDriver) {
	fake.copyAmiDriverMutex.Lock()
	defer fake.copyAmiDriverMutex.Unlock()
	fake.CopyAmiDriverStub = nil
	if fake.copyAmiDriverReturnsOnCall == nil {
		fake.copyAmiDriverReturnsOnCall = make(map[int]struct {
			result1 resources.AmiDriver
		})
	}
	fake.copyAmiDriverReturnsOnCall[i] = struct {
		result1 resources.AmiDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) CreateAmiDriver() resources.AmiDriver {
	fake.createAmiDriverMutex.Lock()
	ret, specificReturn := fake.createAmiDriverReturnsOnCall[len(fake.createAmiDriverArgsForCall)]
	fake.createAmiDriverArgsForCall = append(fake.createAmiDriverArgsForCall, struct {
	}{})
	stub := fake.CreateAmiDriverStub
	fakeReturns := fake.createAmiDriverReturns
	fake.recordInvocation("CreateAmiDriver", []interface{}{})
	fake.createAmiDriverMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStandardRegionDriverSet) CreateAmiDriverCallCount() int {
	fake.createAmiDriverMutex.RLock()
	defer fake.createAmiDriverMutex.RUnlock()
	return len(fake.createAmiDriverArgsForCall)
}

func (fake *FakeStandardRegionDriverSet) CreateAmiDriverCalls(stub func() resources.AmiDriver) {
	fake.createAmiDriverMutex.Lock()
	defer fake.createAmiDriverMutex.Unlock()
	fake.CreateAmiDriverStub = stub
}

func (fake *FakeStandardRegionDriverSet) CreateAmiDriverReturns(result1 resources.AmiDriver) {
	fake.createAmiDriverMutex.Lock()
	defer fake.createAmiDriverMutex.Unlock()
	fake.CreateAmiDriverStub = nil
	fake.createAmiDriverReturns = struct {
		result1 resources.AmiDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) CreateAmiDriverReturnsOnCall(i int, result1 resources.AmiDriver) {
	fake.createAmiDriverMutex.Lock()
	defer fake.createAmiDriverMutex.Unlock()
	fake.CreateAmiDriverStub = nil
	if fake.createAmiDriverReturnsOnCall == nil {
		fake.createAmiDriverReturnsOnCall = make(map[int]struct {
			result1 resources.AmiDriver
		})
	}
	fake.createAmiDriverReturnsOnCall[i] = struct {
		result1 resources.AmiDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) CreateSnapshotDriver() resources.SnapshotDriver {
	fake.createSnapshotDriverMutex.Lock()
	ret, specificReturn := fake.createSnapshotDriverReturnsOnCall[len(fake.createSnapshotDriverArgsForCall)]
	fake.createSnapshotDriverArgsForCall = append(fake.createSnapshotDriverArgsForCall, struct {
	}{})
	stub := fake.CreateSnapshotDriverStub
	fakeReturns := fake.createSnapshotDriverReturns
	fake.recordInvocation("CreateSnapshotDriver", []interface{}{})
	fake.createSnapshotDriverMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStandardRegionDriverSet) CreateSnapshotDriverCallCount() int {
	fake.createSnapshotDriverMutex.RLock()
	defer fake.createSnapshotDriverMutex.RUnlock()
	return len(fake.createSnapshotDriverArgsForCall)
}

func (fake *FakeStandardRegionDriverSet) CreateSnapshotDriverCalls(stub func() resources.SnapshotDriver) {
	fake.createSnapshotDriverMutex.Lock()
	defer fake.createSnapshotDriverMutex.Unlock()
	fake.CreateSnapshotDriverStub = stub
}

func (fake *FakeStandardRegionDriverSet) CreateSnapshotDriverReturns(result1 resources.SnapshotDriver) {
	fake.createSnapshotDriverMutex.Lock()
	defer fake.createSnapshotDriverMutex.Unlock()
	fake.CreateSnapshotDriverStub = nil
	fake.createSnapshotDriverReturns = struct {
		result1 resources.SnapshotDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) CreateSnapshotDriverReturnsOnCall(i int, result1 resources.SnapshotDriver) {
	fake.createSnapshotDriverMutex.Lock()
	defer fake.createSnapshotDriverMutex.Unlock()
	fake.CreateSnapshotDriverStub = nil
	if fake.createSnapshotDriverReturnsOnCall == nil {
		fake.createSnapshotDriverReturnsOnCall = make(map[int]struct {
			result1 resources.SnapshotDriver
		})
	}
	fake.createSnapshotDriverReturnsOnCall[i] = struct {
		result1 resources.SnapshotDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) MachineImageDriver() resources.MachineImageDriver {
	fake.machineImageDriverMutex.Lock()
	ret, specificReturn := fake.machineImageDriverReturnsOnCall[len(fake.machineImageDriverArgsForCall)]
	fake.machineImageDriverArgsForCall = append(fake.machineImageDriverArgsForCall, struct {
	}{})
	stub := fake.MachineImageDriverStub
	fakeReturns := fake.machineImageDriverReturns
	fake.recordInvocation("MachineImageDriver", []interface{}{})
	fake.machineImageDriverMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStandardRegionDriverSet) MachineImageDriverCallCount() int {
	fake.machineImageDriverMutex.RLock()
	defer fake.machineImageDriverMutex.RUnlock()
	return len(fake.machineImageDriverArgsForCall)
}

func (fake *FakeStandardRegionDriverSet) MachineImageDriverCalls(stub func() resources.MachineImageDriver) {
	fake.machineImageDriverMutex.Lock()
	defer fake.machineImageDriverMutex.Unlock()
	fake.MachineImageDriverStub = stub
}

func (fake *FakeStandardRegionDriverSet) MachineImageDriverReturns(result1 resources.MachineImageDriver) {
	fake.machineImageDriverMutex.Lock()
	defer fake.machineImageDriverMutex.Unlock()
	fake.MachineImageDriverStub = nil
	fake.machineImageDriverReturns = struct {
		result1 resources.MachineImageDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) MachineImageDriverReturnsOnCall(i int, result1 resources.MachineImageDriver) {
	fake.machineImageDriverMutex.Lock()
	defer fake.machineImageDriverMutex.Unlock()
	fake.MachineImageDriverStub = nil
	if fake.machineImageDriverReturnsOnCall == nil {
		fake.machineImageDriverReturnsOnCall = make(map[int]struct {
			result1 resources.MachineImageDriver
		})
	}
	fake.machineImageDriverReturnsOnCall[i] = struct {
		result1 resources.MachineImageDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.copyAmiDriverMutex.RLock()
	defer fake.copyAmiDriverMutex.RUnlock()
	fake.createAmiDriverMutex.RLock()
	defer fake.createAmiDriverMutex.RUnlock()
	fake.createSnapshotDriverMutex.RLock()
	defer fake.createSnapshotDriverMutex.RUnlock()
	fake.machineImageDriverMutex.RLock()
	defer fake.machineImageDriverMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStandardRegionDriverSet) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ driverset.StandardRegionDriverSet = new(FakeStandardRegionDriverSet)
