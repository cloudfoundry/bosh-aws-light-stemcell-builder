// This file was generated by counterfeiter
package fakes

import (
	"light-stemcell-builder/driverset"
	"light-stemcell-builder/resources"
	"sync"
)

type FakeStandardRegionDriverSet struct {
	MachineImageDriverStub        func() resources.MachineImageDriver
	machineImageDriverMutex       sync.RWMutex
	machineImageDriverArgsForCall []struct{}
	machineImageDriverReturns     struct {
		result1 resources.MachineImageDriver
	}
	CreateSnapshotDriverStub        func() resources.SnapshotDriver
	createSnapshotDriverMutex       sync.RWMutex
	createSnapshotDriverArgsForCall []struct{}
	createSnapshotDriverReturns     struct {
		result1 resources.SnapshotDriver
	}
	CreateAmiDriverStub        func() resources.AmiDriver
	createAmiDriverMutex       sync.RWMutex
	createAmiDriverArgsForCall []struct{}
	createAmiDriverReturns     struct {
		result1 resources.AmiDriver
	}
	CopyAmiDriverStub        func() resources.AmiDriver
	copyAmiDriverMutex       sync.RWMutex
	copyAmiDriverArgsForCall []struct{}
	copyAmiDriverReturns     struct {
		result1 resources.AmiDriver
	}
}

func (fake *FakeStandardRegionDriverSet) MachineImageDriver() resources.MachineImageDriver {
	fake.machineImageDriverMutex.Lock()
	fake.machineImageDriverArgsForCall = append(fake.machineImageDriverArgsForCall, struct{}{})
	fake.machineImageDriverMutex.Unlock()
	if fake.MachineImageDriverStub != nil {
		return fake.MachineImageDriverStub()
	} else {
		return fake.machineImageDriverReturns.result1
	}
}

func (fake *FakeStandardRegionDriverSet) MachineImageDriverCallCount() int {
	fake.machineImageDriverMutex.RLock()
	defer fake.machineImageDriverMutex.RUnlock()
	return len(fake.machineImageDriverArgsForCall)
}

func (fake *FakeStandardRegionDriverSet) MachineImageDriverReturns(result1 resources.MachineImageDriver) {
	fake.MachineImageDriverStub = nil
	fake.machineImageDriverReturns = struct {
		result1 resources.MachineImageDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) CreateSnapshotDriver() resources.SnapshotDriver {
	fake.createSnapshotDriverMutex.Lock()
	fake.createSnapshotDriverArgsForCall = append(fake.createSnapshotDriverArgsForCall, struct{}{})
	fake.createSnapshotDriverMutex.Unlock()
	if fake.CreateSnapshotDriverStub != nil {
		return fake.CreateSnapshotDriverStub()
	} else {
		return fake.createSnapshotDriverReturns.result1
	}
}

func (fake *FakeStandardRegionDriverSet) CreateSnapshotDriverCallCount() int {
	fake.createSnapshotDriverMutex.RLock()
	defer fake.createSnapshotDriverMutex.RUnlock()
	return len(fake.createSnapshotDriverArgsForCall)
}

func (fake *FakeStandardRegionDriverSet) CreateSnapshotDriverReturns(result1 resources.SnapshotDriver) {
	fake.CreateSnapshotDriverStub = nil
	fake.createSnapshotDriverReturns = struct {
		result1 resources.SnapshotDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) CreateAmiDriver() resources.AmiDriver {
	fake.createAmiDriverMutex.Lock()
	fake.createAmiDriverArgsForCall = append(fake.createAmiDriverArgsForCall, struct{}{})
	fake.createAmiDriverMutex.Unlock()
	if fake.CreateAmiDriverStub != nil {
		return fake.CreateAmiDriverStub()
	} else {
		return fake.createAmiDriverReturns.result1
	}
}

func (fake *FakeStandardRegionDriverSet) CreateAmiDriverCallCount() int {
	fake.createAmiDriverMutex.RLock()
	defer fake.createAmiDriverMutex.RUnlock()
	return len(fake.createAmiDriverArgsForCall)
}

func (fake *FakeStandardRegionDriverSet) CreateAmiDriverReturns(result1 resources.AmiDriver) {
	fake.CreateAmiDriverStub = nil
	fake.createAmiDriverReturns = struct {
		result1 resources.AmiDriver
	}{result1}
}

func (fake *FakeStandardRegionDriverSet) CopyAmiDriver() resources.AmiDriver {
	fake.copyAmiDriverMutex.Lock()
	fake.copyAmiDriverArgsForCall = append(fake.copyAmiDriverArgsForCall, struct{}{})
	fake.copyAmiDriverMutex.Unlock()
	if fake.CopyAmiDriverStub != nil {
		return fake.CopyAmiDriverStub()
	} else {
		return fake.copyAmiDriverReturns.result1
	}
}

func (fake *FakeStandardRegionDriverSet) CopyAmiDriverCallCount() int {
	fake.copyAmiDriverMutex.RLock()
	defer fake.copyAmiDriverMutex.RUnlock()
	return len(fake.copyAmiDriverArgsForCall)
}

func (fake *FakeStandardRegionDriverSet) CopyAmiDriverReturns(result1 resources.AmiDriver) {
	fake.CopyAmiDriverStub = nil
	fake.copyAmiDriverReturns = struct {
		result1 resources.AmiDriver
	}{result1}
}

var _ driverset.StandardRegionDriverSet = new(FakeStandardRegionDriverSet)
